The two different client/server modes are split up into two if statements in the main method. If three or four arguments are not provided it will tell you to do so accordingly.
The first part of the server portion of the program is setting up the socket. This includes things such as binding to the correct port and listening for potential connections (mainly with the networkLayer.py program). The second portion of the server section of code receives 512 bytes of data from the networkLayer which receives from the client. After receiving the data, it is unpacked into each of the header segments and data of the packet. using the hashlib and sha1, we check to see if the hash of the data from the client side is the same as the hash of the data on this side, the server side. If so, acknowledge the packet and let the client know.

The first part of the client portion of the code is also just setting up the socket and attempting to connect to the correct port (the network Layer once again). The second part of the client code deals with opening the file that you are transferring to the server and reading in a certain amount of data at a time. This amount will differ based on the size of your packets. For the sake of this assignment, I decided to use 40 bytes for the checksum (hashlib sha1), 20 bytes for the filename, 1 byte for the sequence number, 1 byte determining whether a packet is the last one or not, and finally 450 bytes of data to add to a total of 512 bytes. I use the struct.pack function to neatly bundle the packet and send it off to the networkLayer and hopefully on to the server. If the timer on the select.select function runs out, it retransmits the last sent packet due to not receiving an ACK from the server. If it receives and ack for the last packet, it closes the connection. If an ack is received and it is not the last packet, it adjusts the byteOffset of where to start in the file and the sequence number in case a reset happens again.

A really weird thing happened and this was turned in kind of last second so I could not work out the script. I can turn it in later if you'd like.
